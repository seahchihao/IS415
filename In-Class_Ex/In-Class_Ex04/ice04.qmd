---
title: "In-Class Exercise 03"
author: "Seah Chi Hao"
date: 2024-09-09
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  freeze: true
  output: true
  warning: false
---

## 1.0 Installing and Loading the R packages

Install the following packages:

-   sf
-   raster
-   spatstat
-   sparr
-   tmap
-   tidyverse

```{r}
pacman::p_load(sf, raster, spatstat, sparr, tmap, tidyverse)
```

## 2.0 Importing and Preparing Study Area
COde chunk below is used to import study area (i.e. Kepulauan Bangka Belitung) into R environment.
```{r}
kbb <- st_read(dsn="data/rawdata",
               layer = "Kepulauan_Bangka_Belitung") %>%
  st_transform(crs = 32748)
```
Revised the code chunk to drop the z dimension.

```{r}
kbb_sf <- st_read(dsn="data/rawdata",
               layer = "Kepulauan_Bangka_Belitung") %>%
  st_union() %>%
  st_zm(drop = TRUE, what = "ZM") %>%
  st_transform(crs = 32748)
```

## 3.0 Converting OWIN
Next, `as.owin()` is used to convert *kbb* into an **owin** object.
```{r}
kbb_owin <- as.owin(kbb_sf)
kbb_owin
```

Next, `class()` is used to confirm if the output is indeed an owin object.
```{r}
class(kbb_owin)
```

## 4.0 Importing and Preparing Forest Fire data
Next, we will import the forest fire data set(i.e. *forestfires.csv*) into R environment.
```{r}
# this is essentially converting aspatial (text) data into geospatial data
fire_sf <- read_csv("data/rawdata/forestfires.csv") %>%
  st_as_sf(coords = c("longitude", "latitude"), #must follow the order "longitude" then "latitude", due to x,y
           #combine lat,log (coordinate) data into projection data under "geometry"
           crs = 4326) %>%
  st_transform(crs = 32748)
```
> Note: `read_csv` is faster (and field name won't change) compared to `read.csv` 

Because **ppp** object only accept numerical or character as mark. 
The code chunk below is used to convert data type of *acq_date* to numeric.

```{r}
fire_sf <- fire_sf %>%
  mutate(DayofYear = yday(acq_date)) %>%
  mutate(Month_num = month(acq_date)) %>%
  mutate(Month_fac = month(acq_date,
                           label = TRUE,
                           abbr = FALSE))
# this is made possible by *lubridate* package within *tidyverse*
```

## 5.0 Visualising the Fire Points

### 5.1 Overall plot
```{r}
tm_shape(kbb_sf)+
  tm_polygons() +
tm_shape(fire_sf)+
  tm_dots()
#the sequence of ploting each layer follows the sequence of the code
```

### 5.2 Visualsing geographic distribution of forest fores by month
```{r}
tm_shape(kbb_sf)+
  tm_polygons() +
tm_shape(fire_sf)+
  tm_dots(size = 0.1) +
tm_facets(by="Month_fac",
          free.coords=FALSE,
          drop.units = TRUE)
```

## 6.0 Computing STKDE by Month
Learn how to compute STKDE by using 

> Note: spatial temporal sparr package include risk (meaning compare with control group)

### 6.1 Exttracting forest fires by month
The code chunk below is used to remove the unwanted fields form *fire_sf* sf data.frame.
This is because `as.ppp()` only need the mark field and geometry field from the input sf data.frame.
```{r}
fire_month <- fire_sf %>%
  select(Month_num)
```

### 6.2 Creating ppp
The code chunk below is used to derive a **ppp** object called *fire_month* from *fire_month* sf data.frame.
```{r}
fire_month_ppp <- as.ppp(fire_month)
fire_month_ppp
```

The code chunk below is used to check the output is in the correct object class.
```{r}
summary(fire_month_ppp)
```

Next, we will check if there are duplicated point events by using the code chunk below.
```{r}
any(duplicated(fire_month_ppp))
```
### 6.3 Including Owin object
The code chunk below is used to combine *orgin_am_ppp* and *am_owin* objects into one.
```{r}
fire_month_owin <- fire_month_ppp[kbb_owin]
summary(fire_month_owin)
```

## 6.4 Computing Spatio-temporal KDE
Next, `stattemo.density()` of sparr package is used to compute STKDE.
```{r}
st_kde <- spattemp.density(fire_month_owin)
summary(st_kde)
```
> Note: Refer back to the STKDE formula to better understand the values derived.

### 6.5 Plotting the spatio-temporal KDE object
In the code below, `plot()` of R base is used to the KDE between July 2023 - December 2023.
```{r}
#| fig-width: 12
#| fig-height: 10
tims <- c(7,8,9,10,11,12) #from July onwards because based on previous data we see that July onwards has more points
par(mfcol=c(2,3))
for(i in tims){
  plot(st_kde, i,
       override.par=FALSE,
       fix.range=TRUE,
       main=paste("KDE at month",i))
}
```

## 7.0 Computing STKDE by Day of Year
## 8.0 Computing STKDE by Day of Year (Imporved method)




