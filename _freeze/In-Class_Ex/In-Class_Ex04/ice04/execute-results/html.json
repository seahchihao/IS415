{
  "hash": "d1647974753ce73672624a2196327d59",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-Class Exercise 03\"\nauthor: \"Seah Chi Hao\"\ndate: 2024-09-09\ndate-modified: \"last-modified\"\nexecute:\n  eval: true\n  echo: true\n  freeze: true\n  output: true\n  warning: false\n---\n\n\n## 1.0 Installing and Loading the R packages\n\nInstall the following packages:\n\n-   sf\n-   raster\n-   spatstat\n-   sparr\n-   tmap\n-   tidyverse\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, raster, spatstat, sparr, tmap, tidyverse)\n```\n:::\n\n\n## 2.0 Importing and Preparing Study Area\nCOde chunk below is used to import study area (i.e. Kepulauan Bangka Belitung) into R environment.\n\n::: {.cell}\n\n```{.r .cell-code}\nkbb <- st_read(dsn=\"data/rawdata\",\n               layer = \"Kepulauan_Bangka_Belitung\") %>%\n  st_transform(crs = 32748)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Kepulauan_Bangka_Belitung' from data source \n  `C:\\Users\\0seah\\SMU\\AY24-25 T1\\IS415\\IS415\\In-Class_Ex\\In-Class_Ex04\\data\\rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 298 features and 27 fields\nGeometry type: POLYGON\nDimension:     XYZ\nBounding box:  xmin: 105.1085 ymin: -3.116593 xmax: 106.8488 ymax: -1.501603\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\nRevised the code chunk to drop the z dimension.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkbb_sf <- st_read(dsn=\"data/rawdata\",\n               layer = \"Kepulauan_Bangka_Belitung\") %>%\n  st_union() %>%\n  st_zm(drop = TRUE, what = \"ZM\") %>%\n  st_transform(crs = 32748)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Kepulauan_Bangka_Belitung' from data source \n  `C:\\Users\\0seah\\SMU\\AY24-25 T1\\IS415\\IS415\\In-Class_Ex\\In-Class_Ex04\\data\\rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 298 features and 27 fields\nGeometry type: POLYGON\nDimension:     XYZ\nBounding box:  xmin: 105.1085 ymin: -3.116593 xmax: 106.8488 ymax: -1.501603\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n## 3.0 Converting OWIN\nNext, `as.owin()` is used to convert *kbb* into an **owin** object.\n\n::: {.cell}\n\n```{.r .cell-code}\nkbb_owin <- as.owin(kbb_sf)\nkbb_owin\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nwindow: polygonal boundary\nenclosing rectangle: [512066.8, 705559.4] x [9655398, 9834006] units\n```\n\n\n:::\n:::\n\n\nNext, `class()` is used to confirm if the output is indeed an owin object.\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(kbb_owin)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"owin\"\n```\n\n\n:::\n:::\n\n\n## 4.0 Importing and Preparing Forest Fire data\nNext, we will import the forest fire data set(i.e. *forestfires.csv*) into R environment.\n\n::: {.cell}\n\n```{.r .cell-code}\n# this is essentially converting aspatial (text) data into geospatial data\nfire_sf <- read_csv(\"data/rawdata/forestfires.csv\") %>%\n  st_as_sf(coords = c(\"longitude\", \"latitude\"), #must follow the order \"longitude\" then \"latitude\", due to x,y\n           #combine lat,log (coordinate) data into projection data under \"geometry\"\n           crs = 4326) %>%\n  st_transform(crs = 32748)\n```\n:::\n\n> Note: `read_csv` is faster (and field name won't change) compared to `read.csv` \n\nBecause **ppp** object only accept numerical or character as mark. \nThe code chunk below is used to convert data type of *acq_date* to numeric.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfire_sf <- fire_sf %>%\n  mutate(DayofYear = yday(acq_date)) %>%\n  mutate(Month_num = month(acq_date)) %>%\n  mutate(Month_fac = month(acq_date,\n                           label = TRUE,\n                           abbr = FALSE))\n# this is made possible by *lubridate* package within *tidyverse*\n```\n:::\n\n\n## 5.0 Visualising the Fire Points\n\n### 5.1 Overall plot\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(kbb_sf)+\n  tm_polygons() +\ntm_shape(fire_sf)+\n  tm_dots()\n```\n\n::: {.cell-output-display}\n![](ice04_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#the sequence of ploting each layer follows the sequence of the code\n```\n:::\n\n\n### 5.2 Visualsing geographic distribution of forest fores by month\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(kbb_sf)+\n  tm_polygons() +\ntm_shape(fire_sf)+\n  tm_dots(size = 0.1) +\ntm_facets(by=\"Month_fac\",\n          free.coords=FALSE,\n          drop.units = TRUE)\n```\n\n::: {.cell-output-display}\n![](ice04_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n## 6.0 Computing STKDE by Month\nLearn how to compute STKDE by using \n\n> Note: spatial temporal sparr package include risk (meaning compare with control group)\n\n### 6.1 Exttracting forest fires by month\nThe code chunk below is used to remove the unwanted fields form *fire_sf* sf data.frame.\nThis is because `as.ppp()` only need the mark field and geometry field from the input sf data.frame.\n\n::: {.cell}\n\n```{.r .cell-code}\nfire_month <- fire_sf %>%\n  select(Month_num)\n```\n:::\n\n\n### 6.2 Creating ppp\nThe code chunk below is used to derive a **ppp** object called *fire_month* from *fire_month* sf data.frame.\n\n::: {.cell}\n\n```{.r .cell-code}\nfire_month_ppp <- as.ppp(fire_month)\nfire_month_ppp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern: 741 points\nmarks are numeric, of storage type  'double'\nwindow: rectangle = [521564.1, 695791] x [9658137, 9828767] units\n```\n\n\n:::\n:::\n\n\nThe code chunk below is used to check the output is in the correct object class.\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(fire_month_ppp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern:  741 points\nAverage intensity 2.49258e-08 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   8.000   9.000   8.579  10.000  12.000 \n\nWindow: rectangle = [521564.1, 695791] x [9658137, 9828767] units\n                    (174200 x 170600 units)\nWindow area = 29728200000 square units\n```\n\n\n:::\n:::\n\n\nNext, we will check if there are duplicated point events by using the code chunk below.\n\n::: {.cell}\n\n```{.r .cell-code}\nany(duplicated(fire_month_ppp))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n### 6.3 Including Owin object\nThe code chunk below is used to combine *orgin_am_ppp* and *am_owin* objects into one.\n\n::: {.cell}\n\n```{.r .cell-code}\nfire_month_owin <- fire_month_ppp[kbb_owin]\nsummary(fire_month_owin)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern:  741 points\nAverage intensity 6.424519e-08 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   8.000   9.000   8.579  10.000  12.000 \n\nWindow: polygonal boundary\n2 separate polygons (no holes)\n           vertices        area relative.area\npolygon 1     47493 11533600000      1.00e+00\npolygon 2       256      306427      2.66e-05\nenclosing rectangle: [512066.8, 705559.4] x [9655398, 9834006] units\n                     (193500 x 178600 units)\nWindow area = 11533900000 square units\nFraction of frame area: 0.334\n```\n\n\n:::\n:::\n\n\n## 6.4 Computing Spatio-temporal KDE\nNext, `stattemo.density()` of sparr package is used to compute STKDE.\n\n::: {.cell}\n\n```{.r .cell-code}\nst_kde <- spattemp.density(fire_month_owin)\nsummary(st_kde)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 15102.47 (spatial)\n  lambda = 0.0304 (temporal)\n\nNo. of observations\n  741 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [512066.8, 705559.4] x [9655398, 9834006]\n\nTemporal bound\n  [1, 12]\n\nEvaluation\n  128 x 128 x 12 trivariate lattice\n  Density range: [1.233458e-27, 8.202976e-10]\n```\n\n\n:::\n:::\n\n> Note: Refer back to the STKDE formula to better understand the values derived.\n\n### 6.5 Plotting the spatio-temporal KDE object\nIn the code below, `plot()` of R base is used to the KDE between July 2023 - December 2023.\n\n::: {.cell}\n\n```{.r .cell-code}\ntims <- c(7,8,9,10,11,12) #from July onwards because based on previous data we see that July onwards has more points\npar(mfcol=c(2,3))\nfor(i in tims){\n  plot(st_kde, i,\n       override.par=FALSE,\n       fix.range=TRUE,\n       main=paste(\"KDE at month\",i))\n}\n```\n\n::: {.cell-output-display}\n![](ice04_files/figure-html/unnamed-chunk-16-1.png){width=1152}\n:::\n:::\n\n\n## 7.0 Computing STKDE by Day of Year\n## 8.0 Computing STKDE by Day of Year (Imporved method)\n\n\n\n\n",
    "supporting": [
      "ice04_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}