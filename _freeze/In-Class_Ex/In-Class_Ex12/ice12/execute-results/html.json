{
  "hash": "2400fe91c2712b2674a25b4e23c3d6c3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-Class Exercise 11\"\nauthor: \"Seah Chi Hao\"\ndate: 2024-11-04\ndate-modified: \"last-modified\"\nexecute:\n  eval: true\n  echo: true\n  freeze: true\n  output: true\n  warning: false\n---\n\n\n\n## 1.0 Installing and Loading the R Packages\n\nInstall the following packages:\n\n- sf\n- spdep\n- GWmodel\n- SpatialML\n- tmap\n- rsample\n- yardstick\n- tidyverse\n- knitr\n- kableExtra\n- spatialR\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spdep, GWmodel, SpatialML,\n               tmap, rsample, yardstick, tidyverse,\n               knitr, kableExtra, spatialRF)\n```\n:::\n\n\n\n## 2.0 The Data\n\n## 2.1 Data Import\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmdata <- read_rds(\"data/rds/mdata.rds\")\n```\n:::\n\n\n\n## 2.2 Data Sampling\nCalibrating predictive models are computational intensive, especially random forest method is used. For quick prototyping, a 10% sample will be selected at random from the data by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nHDB_sample <- mdata %>%\n  sample_n(1500)\n```\n:::\n\n\n\n## 2.3 Checking of overlapping point\n\n::: callout-warning\nWhen using GWmodel to calibrate explantory or predictive models, it is very important to ensure that there are no overlapping point features.\n:::\n\nThe code chunk below is used to check if there are overlapping point features.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noverlapping_points <- HDB_sample %>%\n  mutate(overlap = lengths(st_equals(., .)) > 1)\nsummary(overlapping_points$overlap)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Mode   FALSE    TRUE \nlogical    1047     453 \n```\n\n\n:::\n:::\n\n\n\n## 2.4 Spatial jitter\nIn the code chunk below, `st_jitter()` of **sf** package is used to move the point features by 5m to avoid overlapping point features.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHDB_sample <- HDB_sample %>%\n  st_jitter(amount =5)\n```\n:::\n\n\n\n## 3.0 Data Sampling\nThe entire data are split into training and test data sets with 65% and 35% repectively by using `initial_split()` of **rsample** package. rsample is one of the package of tidymodels.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nresale_split <- initial_split(HDB_sample,\n                              prop = 6.67/10,)\ntrain_data <- training(resale_split)\ntest_data <- testing(resale_split)\n```\n:::\n\n\n\nIt is always a good practice to save the training and test data sets for subsequent use.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(train_data, \"data/rds/train_data.rds\")\nwrite_rds(test_data, \"data/rds/test_data.rds\")\n```\n:::\n\n\n\n## 4.0 Multicollinearity check\nIn order to avoid multicollineraity. In the code chunk below, `ggcorrmat()` if **ggstatsplot** is used to plot a correlation matrix to check if there are pairs of highly correlated independent variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmdata_nogeo <- mdata %>%\n  st_drop_geometry()\nggstatsplot::ggcorrmat(mdata_nogeo[, 2:17])\n```\n\n::: {.cell-output-display}\n![](ice12_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n## 5.0 Building a non-spatial multiple linear regression\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprice_mlr <- lm(resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                data=train_data)\nolsrr::ols_regress(price_mlr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                              Model Summary                                \n--------------------------------------------------------------------------\nR                           0.862       RMSE                    60813.316 \nR-Squared                   0.742       MSE                3754578098.252 \nAdj. R-Squared              0.739       Coef. Var                  14.255 \nPred R-Squared              0.734       AIC                     24901.005 \nMAE                     45987.256       SBC                     24979.529 \n--------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n AIC: Akaike Information Criteria \n SBC: Schwarz Bayesian Criteria \n\n                                     ANOVA                                      \n-------------------------------------------------------------------------------\n                    Sum of                                                     \n                   Squares         DF         Mean Square       F         Sig. \n-------------------------------------------------------------------------------\nRegression    1.065708e+13         14    761220078101.236    202.745    0.0000 \nResidual      3.698259e+12        985      3754578098.252                      \nTotal         1.435534e+13        999                                          \n-------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                 \n------------------------------------------------------------------------------------------------------------------\n                   model          Beta    Std. Error    Std. Beta       t        Sig          lower         upper \n------------------------------------------------------------------------------------------------------------------\n             (Intercept)    115703.696     34303.409                   3.373    0.001     48387.533    183019.860 \n          floor_area_sqm      2778.618       292.262        0.165      9.507    0.000      2205.089      3352.146 \n            storey_order     12698.165      1070.950        0.211     11.857    0.000     10596.559     14799.771 \n    remaining_lease_mths       350.252        14.596        0.450     23.997    0.000       321.610       378.894 \n                PROX_CBD    -16225.588       630.092       -0.572    -25.751    0.000    -17462.065    -14989.110 \n        PROX_ELDERLYCARE    -11330.930      3220.845       -0.061     -3.518    0.000    -17651.436     -5010.423 \n             PROX_HAWKER    -19964.070      4021.046       -0.087     -4.965    0.000    -27854.872    -12073.268 \n                PROX_MRT    -39652.516      5412.288       -0.130     -7.326    0.000    -50273.456    -29031.577 \n               PROX_PARK    -15878.322      4609.199       -0.061     -3.445    0.001    -24923.300     -6833.344 \n               PROX_MALL    -15910.922      6438.111       -0.048     -2.471    0.014    -28544.911     -3276.933 \n        PROX_SUPERMARKET    -18928.514     13304.965       -0.025     -1.423    0.155    -45037.848      7180.821 \nWITHIN_350M_KINDERGARTEN      9309.735      2024.293        0.079      4.599    0.000      5337.313     13282.157 \n   WITHIN_350M_CHILDCARE     -1619.514      1180.948       -0.026     -1.371    0.171     -3936.977       697.948 \n         WITHIN_350M_BUS      -447.695       738.715       -0.011     -0.606    0.545     -1897.331      1001.940 \n       WITHIN_1KM_PRISCH    -10698.012      1543.511       -0.138     -6.931    0.000    -13726.960     -7669.065 \n------------------------------------------------------------------------------------------------------------------\n```\n\n\n:::\n:::\n\n\n\n## 6.0 Predictive Modelling with gwr\n\n### 6.1 Computing bw\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_bw_train_ad <- bw.gwr(resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                  data=train_data,\n                  approach=\"CV\",\n                  kernel=\"gaussian\",\n                  adaptive=TRUE,\n                  longlat=FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAdaptive bandwidth: 625 CV score: 3.459032e+12 \nAdaptive bandwidth: 394 CV score: 3.231786e+12 \nAdaptive bandwidth: 250 CV score: 2.914736e+12 \nAdaptive bandwidth: 162 CV score: 2.610897e+12 \nAdaptive bandwidth: 107 CV score: 2.240188e+12 \nAdaptive bandwidth: 73 CV score: 1.971641e+12 \nAdaptive bandwidth: 52 CV score: 1.797271e+12 \nAdaptive bandwidth: 39 CV score: 1.659472e+12 \nAdaptive bandwidth: 31 CV score: 1.573963e+12 \nAdaptive bandwidth: 26 CV score: 1.550147e+12 \nAdaptive bandwidth: 23 CV score: 1.542544e+12 \nAdaptive bandwidth: 21 CV score: 1.518885e+12 \nAdaptive bandwidth: 19 CV score: 1.515965e+12 \nAdaptive bandwidth: 19 CV score: 1.515965e+12 \n```\n\n\n:::\n\n```{.r .cell-code}\ngwr_bw_train_ad\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 19\n```\n\n\n:::\n:::\n\n\n\n### 6.2 Model calibration\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_ad <- gwr.basic(formula = resale_price ~ floor_area_sqm +\n                      storey_order + remaining_lease_mths +\n                      PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                      PROX_MRT + PROX_PARK + PROX_MALL + \n                      PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                      WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                      WITHIN_1KM_PRISCH,\n                    data=train_data,\n                    bw=20, # rounded up from the previous gwr_bw_train_ad result of 19\n                    kernel=\"gaussian\",\n                    adaptive=TRUE,\n                    longlat=FALSE)\n```\n:::\n\n\n\n### 6.3 Model output\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_ad\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2024-11-12 12:39:16.87581 \n   Call:\n   gwr.basic(formula = resale_price ~ floor_area_sqm + storey_order + \n    remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + \n    PROX_MRT + PROX_PARK + PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN + \n    WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH, \n    data = train_data, bw = 20, kernel = \"gaussian\", adaptive = TRUE, \n    longlat = FALSE)\n\n   Dependent (y) variable:  resale_price\n   Independent variables:  floor_area_sqm storey_order remaining_lease_mths PROX_CBD PROX_ELDERLYCARE PROX_HAWKER PROX_MRT PROX_PARK PROX_MALL PROX_SUPERMARKET WITHIN_350M_KINDERGARTEN WITHIN_350M_CHILDCARE WITHIN_350M_BUS WITHIN_1KM_PRISCH\n   Number of data points: 1000\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n    Min      1Q  Median      3Q     Max \n-167624  -37265    -415   34811  224601 \n\n   Coefficients:\n                            Estimate Std. Error t value Pr(>|t|)    \n   (Intercept)              115703.7    34303.4   3.373 0.000773 ***\n   floor_area_sqm             2778.6      292.3   9.507  < 2e-16 ***\n   storey_order              12698.2     1071.0  11.857  < 2e-16 ***\n   remaining_lease_mths        350.2       14.6  23.997  < 2e-16 ***\n   PROX_CBD                 -16225.6      630.1 -25.751  < 2e-16 ***\n   PROX_ELDERLYCARE         -11330.9     3220.8  -3.518 0.000455 ***\n   PROX_HAWKER              -19964.1     4021.1  -4.965 8.10e-07 ***\n   PROX_MRT                 -39652.5     5412.3  -7.326 4.92e-13 ***\n   PROX_PARK                -15878.3     4609.2  -3.445 0.000595 ***\n   PROX_MALL                -15910.9     6438.1  -2.471 0.013628 *  \n   PROX_SUPERMARKET         -18928.5    13305.0  -1.423 0.155150    \n   WITHIN_350M_KINDERGARTEN   9309.7     2024.3   4.599 4.80e-06 ***\n   WITHIN_350M_CHILDCARE     -1619.5     1181.0  -1.371 0.170572    \n   WITHIN_350M_BUS            -447.7      738.7  -0.606 0.544624    \n   WITHIN_1KM_PRISCH        -10698.0     1543.5  -6.931 7.55e-12 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 61270 on 985 degrees of freedom\n   Multiple R-squared: 0.7424\n   Adjusted R-squared: 0.7387 \n   F-statistic: 202.7 on 14 and 985 DF,  p-value: < 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 3.698259e+12\n   Sigma(hat): 60874.22\n   AIC:  24901.01\n   AICc:  24901.56\n   BIC:  24090.05\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 20 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                                   Min.     1st Qu.      Median     3rd Qu.\n   Intercept                -1663062.62  -204915.89    21043.25   251357.72\n   floor_area_sqm              -2193.66     1268.11     2051.64     3326.94\n   storey_order                 3367.31     8114.04    10358.35    13742.75\n   remaining_lease_mths         -499.92      344.73      423.01      500.86\n   PROX_CBD                   -97523.35   -23153.66   -10733.11    -1318.50\n   PROX_ELDERLYCARE          -256481.72   -25259.97    -5758.02    17495.07\n   PROX_HAWKER               -214127.62   -35792.85   -10937.48    20129.69\n   PROX_MRT                  -295651.58   -92742.73   -54888.07   -20600.71\n   PROX_PARK                 -217869.81   -33139.58   -16436.09     8419.09\n   PROX_MALL                 -254466.70   -34745.35     6084.76    47080.08\n   PROX_SUPERMARKET          -174391.60   -42069.69    -6523.34    30961.08\n   WITHIN_350M_KINDERGARTEN   -41599.70    -8649.22    -2510.79     5292.89\n   WITHIN_350M_CHILDCARE      -14416.73    -2204.59     1410.06     3547.54\n   WITHIN_350M_BUS            -10051.44    -1734.16      502.41     2237.92\n   WITHIN_1KM_PRISCH          -50136.88    -3847.26      363.29     4874.47\n                                  Max.\n   Intercept                1369290.31\n   floor_area_sqm              7807.37\n   storey_order               26779.38\n   remaining_lease_mths         722.65\n   PROX_CBD                  115887.06\n   PROX_ELDERLYCARE          178891.48\n   PROX_HAWKER               133913.30\n   PROX_MRT                  117015.21\n   PROX_PARK                  88564.14\n   PROX_MALL                 320250.75\n   PROX_SUPERMARKET          170670.88\n   WITHIN_350M_KINDERGARTEN   40700.58\n   WITHIN_350M_CHILDCARE      15725.26\n   WITHIN_350M_BUS            11729.78\n   WITHIN_1KM_PRISCH          30465.58\n   ************************Diagnostic information*************************\n   Number of data points: 1000 \n   Effective number of parameters (2trace(S) - trace(S'S)): 403.5455 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 596.4545 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 24082.06 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 23420.25 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 24371.15 \n   Residual sum of squares: 624302459770 \n   R-square value:  0.9565108 \n   Adjusted R-square value:  0.9270377 \n\n   ***********************************************************************\n   Program stops at: 2024-11-12 12:39:17.317655 \n```\n\n\n:::\n:::\n\n\n\n### 6.4 Computing test data bw\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## can be skipped to save time (result would be affected but not by alot)\ngwr_bw_test_adaptive <- bw.gwr(resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                  data=test_data_sp,\n                  approach=\"CV\",\n                  kernel=\"gaussian\",\n                  adaptive=TRUE,\n                  longlat=FALSE)\n```\n:::\n\n\n\n### 6.5 Predicting with test data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_pred <- gwr.predict(formula = resale_price ~ floor_area_sqm +\n                      storey_order + remaining_lease_mths +\n                      PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                      PROX_MRT + PROX_PARK + PROX_MALL + \n                      PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                      WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                      WITHIN_1KM_PRISCH,\n                    data=train_data,\n                    predictdata = test_data,\n                    bw=20, # rounded up from the previous gwr_bw_train_ad result of 19\n                    kernel=\"gaussian\",\n                    adaptive=TRUE,\n                    longlat=FALSE)\n```\n:::\n\n\n\n### 6.6 Saving predicted values\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_pred_df <- as.data.frame(\n  gwr_pred$SDF$prediction) %>%\n  rename(gwr_pred = \"gwr_pred$SDF$prediction\")\n```\n:::\n\n\n\n## 7.0 Predictive Modelling with RF method\n\n### 7.1 Data preparation\nFirstly, code chunk below is used to extract the coordinates of training and test data sets\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords <- st_coordinates(HDB_sample)\ncoords_train <- st_coordinates(train_data)\ncoords_test <- st_coordinates(test_data)\n```\n:::\n\n\n\nNext, code chunk below is used to drop the geometry column of both training and test data sets.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_data_nogeom <- train_data %>%\n  st_drop_geometry()\n```\n:::\n\n\n\n### 7.2 Calibrating RF model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nrf <- ranger(resale_price ~ floor_area_sqm + storey_order + \n               remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE + \n               PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL + \n               PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n               WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n               WITHIN_1KM_PRISCH,\n             data=train_data_nogeom)\n```\n:::\n\n\n\n### 7.3 Model output\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRanger result\n\nCall:\n ranger(resale_price ~ floor_area_sqm + storey_order + remaining_lease_mths +      PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + PROX_PARK +      PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +      WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH,      data = train_data_nogeom) \n\nType:                             Regression \nNumber of trees:                  500 \nSample size:                      1000 \nNumber of independent variables:  14 \nMtry:                             3 \nTarget node size:                 5 \nVariable importance mode:         none \nSplitrule:                        variance \nOOB prediction error (MSE):       2289284270 \nR squared (OOB):                  0.8406868 \n```\n\n\n:::\n:::\n\n\n\n### 7.4 Preparing the test data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data_nogeom <- cbind(\n  test_data, coords_test) %>%\n  st_drop_geometry()\n```\n:::\n\n\n\n### 7.5 Predicting with rf\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_pred <- predict(rf,\n                   data = test_data_nogeom)\n```\n:::\n\n\n\n### 7.6 Saving the predicted values\nThe output of `predict()` of **ranger** object of class *ranger* with elements. Code chunk below is used to extract values from *predictions* of predicted classes and save the values in a data frame called *rf_pred_df*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_pred_df <- as.data.frame(rf_pred$predictions) %>%\n  rename(rf_pred = \"rf_pred$predictions\")\n```\n:::\n\n\n\n## 8.0 Predictive Modelling with SpatialML\n\n### 8.1 Determining bandwidth\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\ngrd_bw_train_ad <- grf.bw(formula = resale_price ~ floor_area_sqm + storey_order +\n                            remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE +\n                            PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL +\n                            PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                            WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                            WITHIN_1KM_PRISCH,\n                          dataset=train_data_nogeom, \n                          kernel=\"adaptive\",\n                          coords=coords_train)\n```\n:::\n\n\n\n### 8.2 Calibrating with grf\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\ngrf_ad <- grf(formula = resale_price ~ floor_area_sqm + storey_order + \n               remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE + \n               PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL + \n               PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n               WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n               WITHIN_1KM_PRISCH,\n             dframe=train_data_nogeom,\n             bw=20,\n             kernel=\"adaptive\",\n             coords=coords_train)\n```\n:::\n\n\n\n### 8.3 Model output\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrf_ad\n```\n:::\n\n\n\n### 8.4 Predicting with the test data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrf_pred <- predict.grf(grf_ad,\ntest_data_nogeom,\nx.var.name=\"X\",\ny.var.name=\"Y\",\nlocal.w=1,\nglobal.w=0)\n```\n:::\n\n\n\n### 8.5 Saving the predicted values\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrd_pred_df <- as.data.frame(grf_pred)\n```\n:::\n\n\n\n## 9.0 Model Comparision\n\n### 9.1 Combining models' outputs\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data_pred <- test_data %>%\n select(resale_price) %>%\n cbind(gwr_pred_df) %>%\n cbind(rf_pred_df) %>%\n cbind(grf_pred_df)\n```\n:::\n\n\n\n### 9.2 Transposing data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_longer <- test_data_pred %>%\nst_drop_geometry() %>%\npivot_longer(cols = ends_with(\"pred\"),\nnames_to = \"model\",\nvalues_to = \"predicted\")\n```\n:::\n\n\n\n### 9.3 Renaming\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_lables <- c(\n  gwr_pred = \"gwr\",\n  rf_pred = \"Random Forest\",\n  grd_pred = \"gwRF\")\n\ntest_longer <- test_longer %>%\n  mutate(model = recode(\n    model, !!!model_labels))\n```\n:::\n\n\n\n### 9.4 Computing rmse\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrmse_results <- test_longer %>%\n  group_by(model) %>%\n  rmse(truth = resale_price, \n       estimate = predicted) %>%\n  rename(rmse = .estimate) %>%\n  select(model, rmse)\n```\n:::\n\n\n\n## 10.0 Model Comparison Plots\n\n### 10.1 Bar chart\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rmse_results, \n       aes(x = reorder(model, rmse), \n           y = rmse, \n           fill = \"skyblue\")) +\n  geom_bar(stat = \"identity\", \n           fill = \"skyblue\", \n           color = \"black\", \n           width = 0.7) +\n  labs(title = \"RMSE Comparison of Models\", \n       y = \"RMSE\", \n       x = \"Model\") +\n  theme_minimal()\n```\n:::\n\n\n\n### 10.2 Scatter plots\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_longer <- test_longer %>%\n  left_join(rmse_results, \n            by = \"model\")\n\nggplot(data = test_longer,\n       aes(x = predicted,\n           y = resale_price)) +\n  facet_wrap(~ model) +\n  geom_point() +\n  geom_text(data = test_longer, \n            aes(x = Inf, y = Inf, \n                label = paste(\"RMSE:\", round(rmse, 2))),\n            hjust = 1.1, vjust = 1.1, \n            color = \"black\", size = 4)\n```\n:::\n\n\n\n## 11.0 Variable Importance\n\n### 11.1 Preparing the output\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvar_imp <- data.frame(\nVariable = names(grf_ad$Global.Model$variable.importance),\nImportance = grf_ad$Global.Model$variable.importance\n)\n```\n:::\n\n\n\n### 11.2 Plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(var_imp, aes(x = reorder(Variable, \n                                Importance), \n                    y = Importance)) +\n  geom_bar(stat = \"identity\", \n           fill = \"skyblue\") +\n  coord_flip() +\n  labs(\n    title = \"Variable Importance from Ranger Model\",\n    x = \"Variables\",\n    y = \"Importance\"\n  ) +\n  theme_minimal()\n```\n:::",
    "supporting": [
      "ice12_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}