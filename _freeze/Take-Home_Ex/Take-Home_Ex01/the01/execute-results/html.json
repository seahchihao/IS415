{
  "hash": "922e156af0af3b1a733064a2929cb67e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Geospatial Analytics for Social Good: Application of Spatial and Spatio-temporal Point Patterns Analysis to discover the geographical distribution of Armed Conflict in Myanmar\"\nsubtitle: \"Take-home Exercise 01\"\nauthor: \"Seah Chi Hao\"\ndate: 2024-09-22\ndate-modified: \"last-modified\"\nexecute:\n  eval: true\n  echo: true\n  freeze: true\n  output: true\n  warning: false\n\n---\n\n\n## 1.0 Overview\n\n### 1.1 Context\n\nMillions of people have their lives shattered by armed conflict – wars – every year.\n\nArmed conflict has been on the rise since about 2012, after a decline in the 1990s and early 2000s. First came conflicts in Libya, Syria and Yemen, triggered by the 2011 Arab uprisings. Libya’s instability spilled south, helping set off a protracted crisis in the Sahel region. A fresh wave of major combat followed: the 2020 Azerbaijani-Armenian war over the Nagorno-Karabakh enclave, horrific fighting in Ethiopia’s northern Tigray region that began weeks later, the conflict prompted by the Myanmar army’s 2021 power grab and Russia’s 2022 assault on Ukraine. Add to those 2023’s devastation in Sudan and Gaza. Around the globe, more people are dying in fighting, being forced from their homes or in need of life-saving aid than in decades.\n\nWe would be zooming into the world's longest civil war in Myanmar by using relevant spatial point patterns analysis methods to discover the spatial and spatio-temporal distribution of armed conflict in Myanmar.\n\n### 1.2 Data\n\n#### 1.2.1 **Armed Conflict Data**\nWe would be getting Myanmar armed conflict data (2021 to June 2024) from [Armed Conflict Location & Event Data (ACLED)](https://acleddata.com/), an independent, impartial, international non-profit organization collecting data on violent conflict and protest in all countries and territories in the world.\n\n#### **1.2.2 GIS Data**\nWe would get our relevant administrative boundary GIS Data from [Myanmar Information Management Unit, MIMU](http://www.themimu.info/).\n\n\n## 2.0 Setup\nIn this assignment, six R packages will be used, they are:\n\n-   [**sf**](https://r-spatial.github.io/sf/), a relatively new R package specially designed to import, manage and process vector-based geospatial data in R.\n-   [**spatstat**](https://spatstat.org/), which has a wide range of useful functions for point pattern analysis. In this hands-on exercise, it will be used to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer.\n- [**sparr**](https://tilmandavies.github.io/sparr/index.html) provides functions to estimate fixed and adaptive kernel-smoothed spatial relative risk surfaces via the density-ratio method and perform subsequent inference. Fixed-bandwidth spatiotemporal density and relative risk estimation is also supported\n-   [**raster**](https://cran.r-project.org/web/packages/raster/) which reads, writes, manipulates, analyses and model of gridded spatial data (i.e. raster). In this hands-on exercise, it will be used to convert image output generate by spatstat into raster format.\n-   [**maptools**](https://cran.r-project.org/web/packages/maptools/index.html) which provides a set of tools for manipulating geographic data. In this hands-on exercise, we mainly use it to convert *Spatial* objects into *ppp* format of **spatstat**.\n-   [**tmap**](https://cran.r-project.org/web/packages/tmap/index.html) which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using [leaflet](https://leafletjs.com/) API.\n\nThe following code chunk below is used to install and launch the six R packages.\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, raster, spatstat, sparr, tmap, tidyverse)\n```\n:::\n\n\n## 3.0 Data Wrangling\n\n### 3.1 Armed Conflict Data\n\n#### 3.1.1 **Import and prepare Myanmar Armed Conflict Data**\n\nIn the code chunk below, we read the data Myanmar Armed Conflict Data and convert the data to Projected Coordinate System (CRS: 32647) from the Geographic Coordinate System, as scanning through the raw csv data. The latitude and longitude data shows that the data is following the Geographic Coordinate System and a Projected Coordinate System would be a better form of geodata for analysis in this context.\n\nWe also did some light data preparation of the data by changing the format of the date and deriving the quarter of each event.\n\n::: {.cell}\n\n```{.r .cell-code}\nraw_data <- read_csv(\"data/raw/2021-01-01-2024-06-30-Myanmar.csv\") %>%\n  st_as_sf(coords = c(\n    \"longitude\", \"latitude\"),\n    crs=4326) %>%\n  st_transform(crs = 32647) %>%\n  mutate(event_date = dmy(event_date)) %>%\n  mutate(quarter = quarter(event_date)) %>%\n  mutate(quarter = case_when(\n    year == 2022 & quarter < 8 ~ quarter + 5,\n    year == 2023 & quarter < 4 ~ quarter + 9,\n    year == 2024 & quarter < 1 ~ quarter + 13,\n    TRUE ~ quarter\n  ))\n```\n:::\n\n\n#### 3.1.2 **Filter out fatal conflicts associated with the Military Forces of Myanmar**\n\nSince we are interested in conflicts that involves the Myanmar Military, we filter out the data with the following code chunk.\n\n::: {.cell}\n\n```{.r .cell-code}\nmilitary_conflict <- raw_data %>%\n  filter(!is.na(actor1) & !is.na(actor2) &\n           grepl(\"Military Forces of Myanmar\", actor1) | grepl(\"Military Forces of Myanmar\", actor2))\n```\n:::\n\n\nWe are interested in events that led to some degree of fatal outcome, hence we further filter our data with the code below.\n\n::: {.cell}\n\n```{.r .cell-code}\nmilitary_conflict <- military_conflict %>%\n  filter(fatalities > 0)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n### 3.2 Administrative boundary data\n\n#### 3.2.1 **Importing the administrative boundary data**\n\n::: {.cell}\n\n```{.r .cell-code}\nboundary = st_read(dsn = \"data/raw/mmr_polbnda2_adm1_250k_mimu_1\", \n                layer = \"mmr_polbnda2_adm1_250k_mimu_1\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `mmr_polbnda2_adm1_250k_mimu_1' from data source \n  `C:\\Users\\0seah\\SMU\\AY24-25 T1\\IS415\\IS415\\Take-Home_Ex\\Take-Home_Ex01\\data\\raw\\mmr_polbnda2_adm1_250k_mimu_1' \n  using driver `ESRI Shapefile'\nSimple feature collection with 18 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\ndistricts_townships = st_read(dsn = \"data/raw/mmr_polbnda_adm3_250k_mimu_1\", \n                layer = \"mmr_polbnda_adm3_250k_mimu_1\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `mmr_polbnda_adm3_250k_mimu_1' from data source \n  `C:\\Users\\0seah\\SMU\\AY24-25 T1\\IS415\\IS415\\Take-Home_Ex\\Take-Home_Ex01\\data\\raw\\mmr_polbnda_adm3_250k_mimu_1' \n  using driver `ESRI Shapefile'\nSimple feature collection with 330 features and 9 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n#### 3.2.2 **Preparing Data**\n\nWe transform the data to Projected Coordinate System (CRS: 32647), allowing for a consistent geodata system to be use for analysis.\n\n::: {.cell}\n\n```{.r .cell-code}\nboundary <- boundary %>%\n  st_transform(crs = 32647)\n\ndistricts_townships <- districts_townships %>%\n  st_transform(crs = 32647)\n```\n:::\n\n\n\nTo ensure that the data can be better manipulated, we need to ensure syntax of the same variable matches.\n\nFor the code chunk below, we are changing the ST data to be consistent with the format of *admin1* in the `military_conflict` dataframe.\n\n::: {.cell}\n\n```{.r .cell-code}\nboundary <- boundary %>%\n  mutate(ST = str_replace_all(ST, \"\\\\(\", \"- \")) %>%\n  mutate(ST = str_remove_all(ST, \"\\\\)\"))\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\n### 3.3 Combining the data\n\nJoining the attribute data and geospatial data\n\n::: {.cell}\n\n```{.r .cell-code}\nmilitary_conflict_distribution <- st_join(military_conflict, boundary,\n                          by = c(\"admin1\" = \"ST\"))\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n### 3.4 Filtering Data for analysis\n\n#### 3.4.1 **Overall Distribution of fatal conflicts associated with the Military Forces of Myanmar**\n\nWe plot an overall distribution of fatal conflicts associated with the Military Forces of Myanmar to get a sensing of the areas we want to focus on.\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\ntm_shape(boundary) +\ntm_polygons() +\n  tm_shape(military_conflict_distribution) +\n  tm_dots()\n```\n\n::: {.cell-output-display}\n![](the01_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\nWe also rank the States and Regions by the amount of fatal conflicts associated with the Military Forces of Myanmar.\n\n::: {.cell}\n\n```{.r .cell-code}\nunique_admin1 <- military_conflict %>%\n  count(admin1, name = \"count\") %>%\n  arrange(desc(count))\n\nunique_admin1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 18 features and 2 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: -206931.7 ymin: 1103500 xmax: 562661.5 ymax: 3026505\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 18 × 3\n   admin1      count                                                    geometry\n   <chr>       <int>                                              <GEOMETRY [m]>\n 1 Sagaing      3375 MULTIPOINT ((-13816.45 2549666), (-13808.2 2533298), (-137…\n 2 Magway       1199 MULTIPOINT ((-14448.48 2310133), (-11778.42 2331424), (-11…\n 3 Mandalay      789 MULTIPOINT ((68129.21 2320839), (69197.66 2321843), (70095…\n 4 Tanintharyi   586 MULTIPOINT ((391330 1604194), (391580 1616869), (391713.2 …\n 5 Kayin         562 MULTIPOINT ((235185 2133257), (236815.5 2149957), (241914.…\n 6 Kayah         528 MULTIPOINT ((279858.3 2139472), (283918.5 2160815), (28752…\n 7 Chin          520 MULTIPOINT ((-156265.4 2407840), (-152350.3 2435531), (-14…\n 8 Shan-North    483 MULTIPOINT ((229100.8 2553686), (237609.2 2472369), (23876…\n 9 Kachin        420 MULTIPOINT ((195339.5 2804590), (208746.8 2822422), (21107…\n10 Mon           408 MULTIPOINT ((275346.6 1937633), (276082.9 1929289), (27724…\n11 Bago-East     364 MULTIPOINT ((196713.9 2122389), (211767.7 2100190), (21319…\n12 Rakhine       337 MULTIPOINT ((-206931.7 2359490), (-204784 2358873), (-2037…\n13 Shan-South    295 MULTIPOINT ((229883.3 2328254), (231506.5 2346187), (23369…\n14 Yangon        215 MULTIPOINT ((149693.3 1924406), (161280.2 1841113), (16477…\n15 Bago-West     167 MULTIPOINT ((100594.7 2072434), (101742.1 2085661), (10944…\n16 Ayeyarwady     43 MULTIPOINT ((1429.168 1776303), (1438.857 1834871), (25125…\n17 Nay Pyi Taw    32 MULTIPOINT ((191287.1 2174478), (192547.7 2183043), (19323…\n18 Shan-East       1                                    POINT (562661.5 2354529)\n```\n\n\n:::\n:::\n\n\nFrom visual as well as data observation, we can see that most fatalities in Myanmar that involves the Military Forces of Myanmar happens within the Sagaing State. \n\nHence, we will zoom into the region for a more detailed analysis and hopefully discover more reasons as to why is the distribution is as such.\n\n#### 3.4.2 **Extract data points within Sagaing State**\n\n::: {.cell}\n\n```{.r .cell-code}\nsagaing_fatal_conflict <- military_conflict_distribution %>%\n  filter(ST == \"Sagaing\")\nsagaing_boundary <- boundary %>%\n  filter(ST == \"Sagaing\")\nsagaing_districts <- districts_townships %>%\n  filter(ST == \"Sagaing\")\n```\n:::\n\n\n#### 3.4.3 **Cleaning of key data for analysis**\n\nCleaning of data by keep only necessary columns from `sagaing_fatal_conflict`.\n\n::: callout-note\n\nWe drop unnecessary columns with data that is:\n\n- not as relevant (i.e. *source*, *source_scale*, etc.) and;\n- columns that has the same data for every row (i.e. *iso*, *region*, *country*, etc.)\n\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsagaing_fatal_conflict_sf <- sagaing_fatal_conflict %>%\n  dplyr::select(event_id_cnty, event_date, year, quarter, disorder_type, sub_event_type, actor1, assoc_actor_1, actor2, assoc_actor_2, admin2, admin3, location, fatalities, geometry)\n\nsagaing_boundary_sf <- sagaing_boundary %>% \n  dplyr::select(OBJECTID, ST, geometry)\n\nsagaing_districts_sf <- sagaing_districts %>% \n  dplyr::select(OBJECTID, ST, DT, TS, geometry)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\n### 3.5 Geospatial Data Wrangling\n\n#### 3.5.1 **Converting from sf format into spatstat’s ppp format**\nWe use *as.ppp()* function of spatstat to convert the spatial data into spatstat’s ppp object format.\n\n::: {.cell}\n\n```{.r .cell-code}\nsagaing_fatal_conflict_ppp <- as.ppp(sagaing_fatal_conflict_sf)\nsagaing_fatal_conflict_ppp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern: 3375 points\nmarks are of storage type  'character'\nwindow: rectangle = [-13816.45, 252995.48] x [2393568.1, 2914062.9] units\n```\n\n\n:::\n:::\n\nWe plot `sagaing_fatal_conflict_ppp` to have a visual sensening of the data.\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(sagaing_fatal_conflict_ppp)\n```\n\n::: {.cell-output-display}\n![](the01_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\nIt is also good to take a look at the summary statistics of the created ppp object.\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(sagaing_fatal_conflict_ppp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern:  3375 points\nAverage intensity 2.430257e-08 points per square unit\n\nCoordinates are given to 13 decimal places\n\nmarks are of type 'character'\nSummary:\n   Length     Class      Mode \n     3375 character character \n\nWindow: rectangle = [-13816.45, 252995.48] x [2393568.1, 2914062.9] units\n                    (266800 x 520500 units)\nWindow area = 1.38874e+11 square units\n```\n\n\n:::\n:::\n\n#### 3.5.2 **Check for duplicates**\n\nWe can check the duplication in ppp object using the following code.\n\n::: {.cell}\n\n```{.r .cell-code}\nany(duplicated(sagaing_fatal_conflict_ppp))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\nFor this data, we managed to not have duplicates.\n\n#### 3.5.3 **Creating *owin* object**\n\nWhen analysing spatial point patterns, it is a good practice to confine the analysis with a geographical area, and we do so using *owin*.\n\nThe code chunk below is used to covert `sagaing_boundary_sf` object into *owin* object of **spatstat**.\n\n::: {.cell}\n\n```{.r .cell-code}\nsagaing_boundary_owin <- as.owin(sagaing_boundary_sf)\n```\n:::\n\n\n#### 3.5.4 **Combining point events object and owin object**\n\nWe combine the point events object `sagaing_fatal_conflict_ppp` with the owin object `sagaing_boundary_owin`, with the following code.\n\n::: {.cell}\n\n```{.r .cell-code}\nfatal_sagaing_ppp = sagaing_fatal_conflict_ppp[sagaing_boundary_owin]\nsummary(fatal_sagaing_ppp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern:  3375 points\nAverage intensity 3.595207e-08 points per square unit\n\nCoordinates are given to 13 decimal places\n\nmarks are of type 'character'\nSummary:\n   Length     Class      Mode \n     3375 character character \n\nWindow: polygonal boundary\nsingle connected closed polygon with 5882 vertices\nenclosing rectangle: [-17699.96, 308341.37] x [2390344.6, 3029739.1] units\n                     (326000 x 639400 units)\nWindow area = 9.3875e+10 square units\nFraction of frame area: 0.45\n```\n\n\n:::\n:::\n\n## 4.0 Further Filtering\n\n### 4.1 **Overall Distribution of fatal conflicts associated with the Military Forces of Myanmar in Sagaing**\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\ntm_shape(sagaing_districts_sf) +\n  tm_polygons() +\n    tm_layout(main.title = \"Distribution of Sagaing fatal events\",\n            main.title.position = \"center\",\n            main.title.size = 0.8) +\n  tm_shape(sagaing_fatal_conflict_sf) +\n  tm_dots()\n```\n\n::: {.cell-output-display}\n![](the01_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\nWe also rank the district by the amount of fatal conflicts associated with the Military Forces of Myanmar.\n\n::: {.cell}\n\n```{.r .cell-code}\nunique_admin2 <- sagaing_fatal_conflict_sf %>%\n  count(admin2, name = \"count\") %>% \n  arrange(desc(count))\n\nunique_admin2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 12 features and 2 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: -13816.45 ymin: 2393568 xmax: 252995.5 ymax: 2914063\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 12 × 3\n   admin2                      count                                    geometry\n   <chr>                       <int>                              <GEOMETRY [m]>\n 1 Shwebo                        783 MULTIPOINT ((70754.36 2531928), (86043.83 …\n 2 Yinmarbin                     530 MULTIPOINT ((34208.65 2449851), (37939.11 …\n 3 Monywa                        514 MULTIPOINT ((83018.94 2486740), (84423.57 …\n 4 Kale                          431 MULTIPOINT ((-13816.45 2549666), (-13808.2…\n 5 Sagaing                       382 MULTIPOINT ((110156.4 2408070), (111663.2 …\n 6 Katha                         317 MULTIPOINT ((148463.5 2714955), (150398.8 …\n 7 Kanbalu                       139 MULTIPOINT ((101698.1 2601562), (102031.1 …\n 8 Kawlin                        103 MULTIPOINT ((127066.5 2635818), (128155.5 …\n 9 Tamu                           94 MULTIPOINT ((5014.299 2640983), (5024.774 …\n10 Mawlaik                        44 MULTIPOINT ((31003.78 2633018), (31644.76 …\n11 Hkamti                         37 MULTIPOINT ((67907.66 2736622), (68804.11 …\n12 Naga Self-Administered Zone     1                    POINT (137629.2 2914063)\n```\n\n\n:::\n:::\n\n\nFrom the data we see Shwebo, Yinmarbin, Monywa, Kale, Sagaing and Katha\tdistrict has a relatively high fatalities of more than 300.\n\nWe would be studying these 6 districts of Sagaing State as analysising the data of the whole Sagaing while more than half the events are hapenning at specific regions might skew the data and lead to a questionable analysis.\n\n\n### 4.2 Extracting study area\n\nThe code chunk below will be used to extract the target districts.\n\n::: {.cell}\n\n```{.r .cell-code}\nshwebo <- sagaing_districts_sf %>%\n  filter(DT == \"Shwebo\")\nyinmarbin <- sagaing_districts_sf %>%\n  filter(DT == \"Yinmarbin\")\nmonywa <- sagaing_districts_sf %>%\n  filter(DT == \"Monywa\")\nkale <- sagaing_districts_sf %>%\n  filter(DT == \"Kale\")\nsagaing <- sagaing_districts_sf %>%\n  filter(DT == \"Sagaing\")\nkatha <- sagaing_districts_sf %>%\n  filter(DT == \"Katha\")\n```\n:::\n\n\n#### 4.2.1 **Converting sf objects into owin objects**\n\n::: {.cell}\n\n```{.r .cell-code}\nshwebo_owin = as.owin(shwebo)\nyinmarbin_owin = as.owin(yinmarbin)\nmonywa_owin = as.owin(monywa)\nkale_owin = as.owin(kale)\nsagaing_owin = as.owin(sagaing)\nkatha_owin = as.owin(katha)\n```\n:::\n\n\n#### 4.2.2 **Combining fatal event points and the study areas**\n\n::: {.cell}\n\n```{.r .cell-code}\nshwebo_ppp = fatal_sagaing_ppp[shwebo_owin]\nyinmarbin_ppp = fatal_sagaing_ppp[yinmarbin_owin]\nmonywa_ppp = fatal_sagaing_ppp[monywa_owin]\nkale_ppp = fatal_sagaing_ppp[kale_owin]\nsagaing_ppp = fatal_sagaing_ppp[sagaing_owin]\nkatha_ppp = fatal_sagaing_ppp[katha_owin]\n```\n:::\n\n\n*rescale.ppp()* function is used to transform the unit of measurement from metre to kilometre.\n\n::: {.cell}\n\n```{.r .cell-code}\nshwebo_ppp.km = rescale.ppp(shwebo_ppp, 1000, \"km\")\nyinmarbin_ppp.km = rescale.ppp(yinmarbin_ppp, 1000, \"km\")\nmonywa_ppp.km = rescale.ppp(monywa_ppp, 1000, \"km\")\nkale_ppp.km = rescale.ppp(kale_ppp, 1000, \"km\")\nsagaing_ppp.km = rescale.ppp(sagaing_ppp, 1000, \"km\")\nkatha_ppp.km = rescale.ppp(katha_ppp, 1000, \"km\")\n```\n:::\n\n\n\n#### 4.2.3 **Plot the six study area and the fatal conflicts location**\n\n::: panel-tabset\n\n### Shwebo\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(shwebo_ppp.km, main = \"Shwebo\")\n```\n\n::: {.cell-output-display}\n![](the01_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n### Yinmarbin\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(yinmarbin_ppp.km, main = \"Yinmarbin\")\n```\n\n::: {.cell-output-display}\n![](the01_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n### Monywa\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(monywa_ppp.km, main = \"Monywa\")\n```\n\n::: {.cell-output-display}\n![](the01_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n### Kale\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(kale_ppp.km, main = \"Kale\")\n```\n\n::: {.cell-output-display}\n![](the01_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n### Sagaing\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(sagaing_ppp.km, main = \"Sagaing\")\n```\n\n::: {.cell-output-display}\n![](the01_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\n### Katha\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(katha_ppp.km, main = \"Katha\")\n```\n\n::: {.cell-output-display}\n![](the01_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\n:::\n\n\n### 4.0 Kernel Density Estimation\n\n#### 4.1 **Compute KDE**\nThe code chunk below computes a kernel density by using the following configurations of [`density()`](https://rdrr.io/cran/spatstat/man/bw.diggle.html) of **spatstat**:\n\n- We will use 5km as the bandwidth for a clearer KDE contrast.\n\n::: panel-tabset\n\n### Shwebo\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(density(shwebo_ppp.km, \n             sigma=5, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Shwebo\")\n```\n\n::: {.cell-output-display}\n![](the01_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n\n### Yinmarbin\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(density(yinmarbin_ppp.km, \n             sigma=5, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Yinmarbin\")\n```\n\n::: {.cell-output-display}\n![](the01_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n\n### Monywa\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(density(monywa_ppp.km, \n             sigma=5, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Monywa\")\n```\n\n::: {.cell-output-display}\n![](the01_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n\n### Kale\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(density(kale_ppp.km, \n             sigma=5, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Kale\")\n```\n\n::: {.cell-output-display}\n![](the01_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n\n### Sagaing\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(density(sagaing_ppp.km, \n             sigma=5, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Sagaing\")\n```\n\n::: {.cell-output-display}\n![](the01_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n:::\n\n\n### Katha\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(density(katha_ppp.km, \n             sigma=5, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Katha\")\n```\n\n::: {.cell-output-display}\n![](the01_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n\n\n:::\n\n## 5.0 Second-order Spatial Point Patterns Analysis\n\n#### 5.1 **Analysing Spatial Point Process Using G-Function**\n\n*Gest()* of **spatat** package is used to compute G-function.\n::: panel-tabset\n\n### Shwebo\n\n::: {.cell}\n\n```{.r .cell-code}\nG_shwebo = Gest(shwebo_ppp, correction = \"border\")\nG_shwebo.csr <- envelope(shwebo_ppp, Gest, nsim = 999)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(G_shwebo.csr)\n```\n\n::: {.cell-output-display}\n![](the01_files/figure-html/unnamed-chunk-41-1.png){width=672}\n:::\n:::\n\n\n### Yinmarbin\n\n::: {.cell}\n\n```{.r .cell-code}\nG_yinmarbin = Gest(yinmarbin_ppp, correction = \"border\")\nG_yinmarbin.csr <- envelope(yinmarbin_ppp, Gest, nsim = 999)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(G_yinmarbin.csr)\n```\n\n::: {.cell-output-display}\n![](the01_files/figure-html/unnamed-chunk-42-1.png){width=672}\n:::\n:::\n\n\n### Monywa\n\n::: {.cell}\n\n```{.r .cell-code}\nG_monywa = Gest(monywa_ppp, correction = \"border\")\nG_monywa.csr <- envelope(monywa_ppp, Gest, nsim = 999)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(G_monywa.csr)\n```\n\n::: {.cell-output-display}\n![](the01_files/figure-html/unnamed-chunk-43-1.png){width=672}\n:::\n:::\n\n\n### Kale\n\n::: {.cell}\n\n```{.r .cell-code}\nG_kale = Gest(kale_ppp, correction = \"border\")\nG_kale.csr <- envelope(kale_ppp, Gest, nsim = 999)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(G_kale.csr)\n```\n\n::: {.cell-output-display}\n![](the01_files/figure-html/unnamed-chunk-44-1.png){width=672}\n:::\n:::\n\n\n### Sagaing\n\n::: {.cell}\n\n```{.r .cell-code}\nG_sagaing = Gest(sagaing_ppp, correction = \"border\")\nG_sagaing.csr <- envelope(sagaing_ppp, Gest, nsim = 999)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(G_sagaing.csr)\n```\n\n::: {.cell-output-display}\n![](the01_files/figure-html/unnamed-chunk-45-1.png){width=672}\n:::\n:::\n\n\n### Katha\n\n::: {.cell}\n\n```{.r .cell-code}\nG_katha = Gest(katha_ppp, correction = \"border\")\nG_katha.csr <- envelope(katha_ppp, Gest, nsim = 999)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(G_katha.csr)\n```\n\n::: {.cell-output-display}\n![](the01_files/figure-html/unnamed-chunk-46-1.png){width=672}\n:::\n:::\n\n\n:::\n\n\n### 6.0 Possible explanation of the KDE and 2nd-Order Spatial Point Patterns Analysis\n![Figure 1: Map of Sagaing](picture/Sagaing_map.jpg){fig-align=\"center\"}\nWe can see that the regions with the highest fatal conflicts in Sagaing State are situated mainly towards south side of the state. All 6 of the study areas we analysed are at the south side of Sagaing State, that shows high fatal conflict occurrences that was associated to the Military Forces of Myanmar, which came at no surprise. \n\nThe South part of Sagaing State neighbor the Shan State, and both regions are filled with vasts agriculture land. In times of uncertainties and civil war, everyone would head to the source of food to ensure that they have enough food while their \"enemy\" has as little as possible.\n\nIt is also visible that there is a trend of more fatal conflicts happening near borders of districts, this could be due to borders are usually further away from the main settlement or urban centers, which prevent injured individuals from getting help. The Military Forces of Myanmar are also known to camp at borders, which could also explain why most fatal conflicts with the military happens near borders of districts.\n\nAdditionally, 2nd-Order Spatial Point Patterns Analysis using G-Function shows that the fatal conflict distribution was not randomly distributed. Hence, it is of some truth that fatal conflicts that involves the Military Forces of Myanmar are due to plans by them to take control over certain parts of Myanmar, especially at the south regions of the Sagaing state.\n\n\n## 7.0 Spatio-Temporal Point Patterns Analysis\n\n\n### 7.1 Study area (Sagaing State)\nWe would be analysing Sagaing State as a whole for Spatio-Temporal Point Patterns Analysis. To see what are the movements of the fatal conflicts involving the Military Forces of Myanmar looks like.\n\n### 7.2 Visualising Distribution of fatal conflicts associated with the Military Forces of Myanmar in Sagaing\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\ntm_shape(sagaing_districts_sf) +\n  tm_polygons() +\n    tm_layout(main.title = \"Distribution of Sagaing fatal events\",\n            main.title.position = \"center\",\n            main.title.size = 0.8) +\n  tm_shape(sagaing_fatal_conflict_sf) +\n  tm_dots()\n```\n\n::: {.cell-output-display}\n![](the01_files/figure-html/unnamed-chunk-47-1.png){width=672}\n:::\n:::\n\n\n### 7.3 Visualising Distribution of fatal conflicts associated with the Military Forces of Myanmar in Sagaing by quarter\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\ntm_shape(sagaing_districts_sf) +\n  tm_polygons() +\n    tm_layout(main.title = \"Distribution of Sagaing fatal events\",\n            main.title.position = \"center\",\n            main.title.size = 0.8) +\n  tm_shape(sagaing_fatal_conflict_sf) +\n  tm_dots() +\n  tm_facets(by=\"quarter\", \n            free.coords=FALSE, \n            drop.units = TRUE)\n```\n\n::: {.cell-output-display}\n![](the01_files/figure-html/unnamed-chunk-48-1.png){width=672}\n:::\n:::\n\n\n### 7.4 Computing STKDE by Quarter\n\nWe will be computing STKDE by using *spattemp.density()* of **sparr** package.\n\n#### 7.4.1 **Extracting fatal conflicts by quarter**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsagaing_fatal_quarter <- sagaing_fatal_conflict_sf %>%\n  dplyr::select(quarter, geometry)\n```\n:::\n\n\n#### 7.4.2 **Creating ppp**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsagaing_fatal_quarter_ppp <- as.ppp(sagaing_fatal_quarter)\nsagaing_fatal_quarter_ppp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern: 3375 points\nmarks are numeric, of storage type  'double'\nwindow: rectangle = [-13816.45, 252995.48] x [2393568.1, 2914062.9] units\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(sagaing_fatal_quarter_ppp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern:  3375 points\nAverage intensity 2.430257e-08 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 13 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   4.000   7.000   6.699   9.000  12.000 \n\nWindow: rectangle = [-13816.45, 252995.48] x [2393568.1, 2914062.9] units\n                    (266800 x 520500 units)\nWindow area = 1.38874e+11 square units\n```\n\n\n:::\n:::\n\n#### 7.4.3 **Check for duplicates**\n\n::: {.cell}\n\n```{.r .cell-code}\nany(duplicated(sagaing_fatal_quarter_ppp))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(multiplicity(sagaing_fatal_quarter_ppp) > 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1867\n```\n\n\n:::\n:::\n\n\nThe output shows 1867 duplicated point event.\nUse the jittering approach to remove duplicates.\n\n::: {.cell}\n\n```{.r .cell-code}\nsagaing_fatal_quarter_ppp_jit <- rjitter(sagaing_fatal_quarter_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\n```\n:::\n\n\n\n#### 7.4.4 ** Combine `sagaing_fatal_quarter_ppp` and `sagaing_boundary_owin` **\n\n::: {.cell}\n\n```{.r .cell-code}\nsagaing_fatal_quarter_owin <- sagaing_fatal_quarter_ppp_jit[sagaing_boundary_owin]\nsummary(sagaing_fatal_quarter_owin)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern:  3371 points\nAverage intensity 3.590946e-08 points per square unit\n\nCoordinates are given to 15 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   4.000   7.000   6.699   9.000  12.000 \n\nWindow: polygonal boundary\nsingle connected closed polygon with 5882 vertices\nenclosing rectangle: [-17699.96, 308341.37] x [2390344.6, 3029739.1] units\n                     (326000 x 639400 units)\nWindow area = 9.3875e+10 square units\nFraction of frame area: 0.45\n```\n\n\n:::\n:::\n\nPlot the combine owin\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(sagaing_fatal_quarter_owin)\n```\n\n::: {.cell-output-display}\n![](the01_files/figure-html/unnamed-chunk-56-1.png){width=672}\n:::\n:::\n\n\n#### 7.4.5 **Computing Spatio-temporal KDE**\n\nWe use `spattemp.density()` of sparr package is used to compute the STKDE.\n\n::: {.cell}\n\n```{.r .cell-code}\nst_kde <- spattemp.density(sagaing_fatal_quarter_owin)\nsummary(st_kde)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 20483.04 (spatial)\n  lambda = 0.0259 (temporal)\n\nNo. of observations\n  3371 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [-17699.96, 308341.4] x [2390345, 3029739]\n\nTemporal bound\n  [1, 12]\n\nEvaluation\n  128 x 128 x 12 trivariate lattice\n  Density range: [0, 2.092708e-10]\n```\n\n\n:::\n:::\n\n\n### 7.5 Plotting the spatio-temporal KDE object\n\n::: {.cell}\n\n```{.r .cell-code}\ntims <- c(1,2,3,4,5,6,7,8,9,10,11,12)\npar(mfcol=c(2,3))\nfor(i in tims){ \n  plot(st_kde, i, \n       override.par=FALSE, \n       fix.range=TRUE, \n       main=paste(\"KDE at quarter\",i))\n}\n```\n\n::: {.cell-output-display}\n![](the01_files/figure-html/unnamed-chunk-58-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](the01_files/figure-html/unnamed-chunk-58-2.png){width=672}\n:::\n:::\n\n\n### 8.0 Possible explanation of the Spatio-temporal KDE and 2nd-Order Spatial Point Patterns Analysis\nWe can see that from the Spatio-temporal KDE, other than 2021 Q2 and 2022 Q1, there seems to be some level of fatal conflicts happening at the Southern side of Sagaing state. It is also quite obvious that throughout the quarters, most of the fatal conflicts happen at the border of Sagaing state. Which was also identified during the static analysis of KDE within the Southern region of Sagaing State.\n\nAnother interesting finding is that, fatal conflicts in Sagaing State seems to be lower generally during Q2 and Q3 and more dense during Q1 and Q4, with the year 2022 being an exception. A potential reason for such trend could be due to the fact that most of the rice are harvested during mid-October of the year, with the second greater rice harvest during March. If the case that the Military Forces of Myanmar are getting into fatal conflicts for the control of agriculture land is true, the data would make a lot of sense as to why there is a spike in fatal conflicts during these periods.\n\nAnother reason to potentially justify the lesser density of fatal conflicts within Sagaing State in 2022 could be due to the fact that in 2022, the Military Forces of Myanmar intensified their military operations against the ethic armed group in some areas, including the neighboring Chin State. Where more militants are likely to relocate from within or around Sagaing State to the neighboring Chin State, to help with the military operations against the ethic armed group in that region.\n\n### 9.0 Conclusion\nIn conclusion, the spatio-temporal analysis of armed conflict in Myanmar, employing Kernel Density Estimation (KDE) and spatial point patterns analysis, offers a comprehensive understanding of the conflict's complex dynamics. By examining the spatial distribution, temporal patterns, and underlying drivers, this study provides valuable insights for policymakers, humanitarian organisations, and peacebuilding initiatives.\n\nAlthough there is limited data available regarding the actual intention of parties in conflicts and wars, and sources that report about tensions can sometimes be very bias. Data and findings can help us to make educated guess as to what is happening. In this assignment, the findings underscore the multifaceted nature of the conflict, influenced by the military's strategic objectives, resource considerations, and broader geopolitical factors. The ongoing civil war, characterised by displacement, humanitarian crises, and human rights violations, is a direct consequence of these underlying dynamics.\n\nKDE, through its visualisation capabilities, provides a visual representation of conflict intensity, aiding in identifying areas of high and low conflict risk. Spatial point patterns analysis, on the other hand, delves deeper into the underlying spatial and temporal dynamics, revealing patterns and trends that may not be immediately apparent.\n\nThe combination of these methods offers a more comprehensive understanding of the conflict's complexities, enabling policymakers to make informed decisions regarding resource allocation, conflict prevention strategies, and humanitarian interventions. By addressing the root causes of the conflict and promoting sustainable peace, it is possible to mitigate the suffering of millions affected by this ongoing crisis.",
    "supporting": [
      "the01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}